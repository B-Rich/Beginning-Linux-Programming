	你可以很容易地创建和维护自己的静态库，只要使用ar（代表archive，即建立归档文件）程序和使用gcc -c命令对函数分别进行编译。你应该尽可能把函数分别保存到不同的源文件中。如果函数需要访问公共数据，你可以把它们放在同一个源文件中，并使用在该文件中声明的静态变量。
实验 静态库
	（1）首先，为两个函数分别创建各自的源文件（将它们分别命名为fred.c和bill.c）。
	（2）你可以分别编译这些函数以产生要包含在库文件中的目标文件。这可以通过调用带有-c选项的C语言编译器来完成，-c选项的作用是阻止编译器创建一个完整的程序。如果此时试图创建一个完整的程序将不会成功，因为你还未定义main函数。
	$gcc -c bill.c fred.c
	$ls *.o
	（3）现在编写一个调用bill函数的程序。首先，为你的库文件创建一个头文件lib.h。这个头文件将声明你的库文件中的函数，它应该被所有希望使用你的库文件的应用程序所包含。把这个头文件包含在源文件fred.c和bill.c中是一个好主意，它将帮助编译器发现所有错误。
	（4）调用程序（program.c）非常简单。它包含库的头文件并且调用库中的一个函数。
	（5）现在，你可以编译并测试这个程序了。你暂时为编译器显式指定目标文件，然后要求编译器编译你的文件并将其与先前编译好的目标模块bill.o链接。
	$gcc -c program.c
	$gcc -o program program.o bill.o
	$./program
	（6）现在，你将创建并使用一个库文件。你使用ar程序创建一个归档文件并将你的目标文件添加进去。这个程序之所以称为ar，是因为它将若干单独的文件归并到一个大的文件中以创建归档文件或集合。注意，你也可以用ar程序来创建任何类型文件的归档文件（与许多UNIX工具一样，ar是一个通用工具）。
	$ar crv libfoo.a bill.o fred.o
	（7）库文件创建好了，两个目标文件也已添加进去。在某些系统，尤其是从Berkeley UNIX衍生的系统中，要想成功地使用函数库，你还需要为函数库生成一个内容表。你可以通过ranlib命令来完成这一工作。在Linux中，当你使用的是GNU的软件开发工具时，这一步骤并不是必需的（但做了也无妨）。
	$ranlib libfoo.a
	你的函数库现在可以使用了。你可以在编译器使用的文件列表中添加该库文件以创建你的程序，如下所示：
	$gcc -o program program.o libfoo.a
	$./program
	你也可以使用-l选项来访问函数库，但因其未保存在标准位置，所以你必须使用-L选项来告诉编译器在何处可以找到它，如下所示：
	$gcc -o program program.o -L. -lfoo
	-L.选项告诉编译器在当前目录（.）中查找函数库。-lfoo选项告诉编译器使用名为libfoo.a的函数库（或者名为libfoo.so的共享库，如果它存在的话）。要查看哪些函数被包含在目标文件、函数库或可执行文件里，你可以使用nm命令。如果你查看program和libfoo.a，你就会看到函数库libfoo.a中包含fred和bill两个函数，而program里只包含函数bill。当程序被创建时，它只包含函数库中它实际需要的函数。虽然程序中的头文件包含函数库中所有函数的声明，但这并不会将整个函数库包含丰最终的程序中。
